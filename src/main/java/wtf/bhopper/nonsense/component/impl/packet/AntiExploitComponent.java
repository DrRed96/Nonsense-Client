package wtf.bhopper.nonsense.component.impl.packet;

import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S2BPacketChangeGameState;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import wtf.bhopper.nonsense.Nonsense;
import wtf.bhopper.nonsense.component.Component;
import wtf.bhopper.nonsense.event.EventLink;
import wtf.bhopper.nonsense.event.Listener;
import wtf.bhopper.nonsense.event.impl.packet.EventReceivePacket;
import wtf.bhopper.nonsense.module.impl.other.PackSpoofer;
import wtf.bhopper.nonsense.util.minecraft.player.PacketUtil;

import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

// I stole most of this shit from Rise LOL

public class AntiExploitComponent extends Component {

    @EventLink
    public final Listener<EventReceivePacket> onReceivePacket = event -> {

        if (event.packet instanceof S2BPacketChangeGameState packet) {
            if (packet.getGameState() == 5 && packet.func_149137_d() == 0) {
                event.cancel();
            }

        } else if (event.packet instanceof S27PacketExplosion packet) {
            if (packet.getMotionX() >= 127.0F || packet.getMotionY() > 127.0F || packet.getMotionZ() >= 127.0F) {
                event.cancel();
            }

        } else if (event.packet instanceof S48PacketResourcePackSend packet) {

            // Pack spoofer will also patch the exploit
            if (Nonsense.module(PackSpoofer.class).isToggled()) {
                return;
            }

            String url = packet.getURL();
            String hash = packet.getHash();

            if (url.toLowerCase().startsWith("level://")) {
                try {
                    URI uri = new URI(url);

                    String scheme = uri.getScheme();
                    boolean isLevelProtocol = "level".equals(scheme);

                    if (!("http".equals(scheme) || "https".equals(scheme) || isLevelProtocol)) {
                        throw new URISyntaxException(url, "Wrong protocol");
                    }

                    url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8);

                    if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                        Nonsense.LOGGER.warn("Server tried to access the path: {}", url);
                        throw new URISyntaxException(url, "Invalid levelstorage resource pack path");
                    }

                } catch (Exception exception) {
                    event.cancel();
                    PacketUtil.send(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                }
            }
        }

    };

}
