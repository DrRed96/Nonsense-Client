package wtf.bhopper.nonsense.module.impl.exploit;

import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.server.S3APacketTabComplete;
import wtf.bhopper.nonsense.event.EventLink;
import wtf.bhopper.nonsense.event.Listener;
import wtf.bhopper.nonsense.event.impl.packet.EventReceivePacket;
import wtf.bhopper.nonsense.event.impl.client.EventTick;
import wtf.bhopper.nonsense.module.Module;
import wtf.bhopper.nonsense.module.ModuleCategory;
import wtf.bhopper.nonsense.module.ModuleInfo;
import wtf.bhopper.nonsense.module.property.impl.BooleanProperty;
import wtf.bhopper.nonsense.util.minecraft.player.ChatUtil;
import wtf.bhopper.nonsense.util.minecraft.player.PacketUtil;
import wtf.bhopper.nonsense.util.minecraft.player.PlayerUtil;
import wtf.bhopper.nonsense.util.misc.GeneralUtil;

import java.util.ArrayList;
import java.util.List;

@ModuleInfo(name = "Plugins",
        description = "Scans the server for plugins.",
        category = ModuleCategory.EXPLOIT)
public class Plugins extends Module {

    private final BooleanProperty bypass = new BooleanProperty("Bypass", "Tries to bypass anti plugin scanners", false);

    private int ticks = 0;

    public Plugins() {
        this.addProperties(this.bypass);
    }

    @Override
    public void onEnable() {
        if (mc.isSingleplayer()) {
            ChatUtil.error("HOHOHO YES!!! IM GONNA SCAN FOR PLUGINS IN MY SINGLE PLAYER WOLRD");
            this.toggle(false);
            return;
        }

        if (this.bypass.get()) {
            for (char c : GeneralUtil.ALPHABET.toCharArray()) {
                PacketUtil.send(new C14PacketTabComplete("/" + c));
            }
        } else {
            PacketUtil.sendNoEvent(new C14PacketTabComplete("/"));
        }
        ticks = 0;
    }

    @EventLink
    public final Listener<EventTick> onTick = event -> {

        if (PlayerUtil.canUpdate()) {

            ticks++;
            if (ticks >= 20) {
                ChatUtil.error("Plugins check timed out");
                ticks = 0;
                this.toggle(false);
            }
        }
    };

    @EventLink
    public final Listener<EventReceivePacket> onReceivePacket = event -> {
        if (event.packet instanceof S3APacketTabComplete packet) {

            List<String> plugins = new ArrayList<>();
            String[] commands = packet.getMatches();

            for (String command : commands) {
                String[] cmdParts = command.split(":");
                if (cmdParts.length > 1) {
                    String plugin = cmdParts[0].replace("/", "");
                    if (!plugins.contains(plugin)) {
                        plugins.add(plugin);
                    }
                }
            }

            if (!plugins.isEmpty()) {
                ChatUtil.print("\247aPlugins \2478(\2477%d\2478): \247c%s", plugins.size(), String.join("\2477, \247c", plugins));
            } else {
                ChatUtil.error("No plugins were found");
            }

            this.toggle(false);

        }
    };

}
