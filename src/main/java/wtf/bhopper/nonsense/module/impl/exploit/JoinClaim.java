package wtf.bhopper.nonsense.module.impl.exploit;

import com.mojang.authlib.exceptions.AuthenticationException;
import com.mojang.authlib.legacy.LegacyAuthenticationService;
import com.mojang.authlib.minecraft.MinecraftSessionService;
import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
import wtf.bhopper.nonsense.event.EventLink;
import wtf.bhopper.nonsense.event.Listener;
import wtf.bhopper.nonsense.event.impl.player.EventUpdate;
import wtf.bhopper.nonsense.module.Module;
import wtf.bhopper.nonsense.module.ModuleCategory;
import wtf.bhopper.nonsense.module.ModuleInfo;
import wtf.bhopper.nonsense.util.misc.Stopwatch;

import java.net.Proxy;
import java.util.UUID;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

@ModuleInfo(name = "Join Claim", description = "Prevents your account from joining servers while you are on a server.", category = ModuleCategory.EXPLOIT)
public class JoinClaim extends Module {

    private final MinecraftSessionService sessionService = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString()).createMinecraftSessionService();
    private final Stopwatch stopwatch = new Stopwatch();
    private final Executor executor = Executors.newSingleThreadExecutor();

    @EventLink
    public final Listener<EventUpdate> onUpdate = _ -> {

        if (!mc.isIntegratedServerRunning() && mc.getSession() != null) {
            if (this.stopwatch.hasReached(1000L)) {
                this.executor.execute(() -> {
                    try {
                        // Rate limits the account in the Minecraft session service.
                        sessionService.joinServer(mc.getSession().getProfile(), mc.getSession().getToken(), "");
                    } catch (AuthenticationException _) { }
                });
                this.stopwatch.reset();
            }
        }
    };

}
