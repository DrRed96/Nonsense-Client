package wtf.bhopper.nonsense.module.impl.exploit;

import net.minecraft.block.Block;
import net.minecraft.block.BlockLeaves;
import net.minecraft.block.BlockSnow;
import net.minecraft.block.BlockWeb;
import net.minecraft.block.material.Material;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MathHelper;
import net.minecraft.util.Vec3;
import wtf.bhopper.nonsense.event.bus.EventLink;
import wtf.bhopper.nonsense.event.bus.Listener;
import wtf.bhopper.nonsense.event.impl.client.EventTick;
import wtf.bhopper.nonsense.event.impl.packet.EventReceivePacket;
import wtf.bhopper.nonsense.module.Module;
import wtf.bhopper.nonsense.module.ModuleCategory;
import wtf.bhopper.nonsense.module.ModuleInfo;
import wtf.bhopper.nonsense.module.property.annotations.Description;
import wtf.bhopper.nonsense.module.property.impl.EnumProperty;
import wtf.bhopper.nonsense.util.minecraft.player.PacketUtil;
import wtf.bhopper.nonsense.util.minecraft.player.PlayerUtil;
import wtf.bhopper.nonsense.util.minecraft.world.BlockUtil;

@ModuleInfo(name = "Disabler",
        description = "Bye bye bad anti-cheat!",
        category = ModuleCategory.EXPLOIT)
public class Disabler extends Module {

    private final EnumProperty<Mode> mode = new EnumProperty<>("Mode", "Disabler method", Mode.PACKET_FUCK);

    public Disabler() {
        this.addProperties(this.mode);
        this.setSuffix(this.mode::getDisplayValue);
    }

    @EventLink
    public final Listener<EventReceivePacket> onReceivePacket = event -> {

        if (!PlayerUtil.canUpdate()) {
            return;
        }

        switch (this.mode.get()) {
            case FLAG -> {
                if (event.packet instanceof S08PacketPlayerPosLook packet) {
                    event.cancel();
                    PacketUtil.send(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                }
            }

        }
    };

    public boolean packetFuck() {
        return this.isToggled() && this.mode.is(Mode.PACKET_FUCK);
    }

    private enum Mode {
        FLAG,
        PACKET_FUCK
    }


}
