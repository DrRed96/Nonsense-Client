package wtf.bhopper.nonsense.module.impl.exploit;

import io.netty.util.internal.ThreadLocalRandom;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import wtf.bhopper.nonsense.event.bus.EventLink;
import wtf.bhopper.nonsense.event.bus.Listener;
import wtf.bhopper.nonsense.event.impl.packet.EventSendPacket;
import wtf.bhopper.nonsense.module.Module;
import wtf.bhopper.nonsense.module.ModuleCategory;
import wtf.bhopper.nonsense.module.ModuleInfo;
import wtf.bhopper.nonsense.module.property.impl.EnumProperty;
import wtf.bhopper.nonsense.module.property.impl.NumberProperty;
import wtf.bhopper.nonsense.util.minecraft.player.PacketUtil;
import wtf.bhopper.nonsense.util.minecraft.player.PlayerUtil;

import java.util.ArrayDeque;
import java.util.Queue;

@ModuleInfo(name = "Ping Spoofer",
        description = "Increases your ping server side",
        category = ModuleCategory.EXPLOIT,
        searchAlias = "Fake Lag")
public class PingSpoofer extends Module {

    private final EnumProperty<Mode> mode = new EnumProperty<>("Mode", "Ping spoof method", Mode.DELAY);
    private final NumberProperty minDelay = new NumberProperty("Min Delay", "Minimum delay", () -> this.mode.is(Mode.DELAY), 200, 50, 5000, 50, NumberProperty.FORMAT_MS);
    private final NumberProperty maxDelay = new NumberProperty("Max Delay", "Maximum delay", () -> this.mode.is(Mode.DELAY), 300, 50, 5000, 50, NumberProperty.FORMAT_MS);
    private final NumberProperty stackSize = new NumberProperty("Stack Size", "Packet stack size", () -> this.mode.is(Mode.STACK), 5, 2, 20, 1, NumberProperty.FORMAT_INT);

    private final Queue<Packet<?>> packetStack = new ArrayDeque<>();

    public PingSpoofer() {
        this.addProperties(this.mode, this.minDelay, this.maxDelay, this.stackSize);
        this.setSuffix(this.mode::getDisplayValue);

        this.minDelay.addValueChangeListener((oldValue, value) -> {
            if (this.maxDelay.getDouble() < value) {
                this.maxDelay.set(value);
            }
        });

        this.maxDelay.addValueChangeListener((oldValue, value) -> {
            if (this.minDelay.getDouble() > value) {
                this.minDelay.set(value);
            }
        });
    }

    @EventLink
    public final Listener<EventSendPacket> onSendPacket = event -> {

        // TODO: spoof C0F's
        switch (this.mode.get()) {
            case DELAY -> {
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                    new Thread(() -> {
                        try {
                            Thread.sleep(minDelay.getInt() == maxDelay.getInt() ? minDelay.getInt() : ThreadLocalRandom.current().nextInt(minDelay.getInt(), maxDelay.getInt()));
                        } catch (InterruptedException ignored) {
                        }
                        if (PlayerUtil.canUpdate()) {
                            PacketUtil.sendNoEvent(event.packet);
                        }
                    }).start();
                }
            }

            case STACK -> {
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                    this.packetStack.add(event.packet);
                    if (this.packetStack.size() >= this.stackSize.get()) {
                        while (!this.packetStack.isEmpty()) {
                            PacketUtil.sendNoEvent(this.packetStack.poll());
                        }
                    }
                }
            }

            case CANCEL -> {
                if (event.packet instanceof C00PacketKeepAlive) {
                    event.cancel();
                }
            }

            case ZERO -> {
                if (event.packet instanceof C00PacketKeepAlive packet) {
                    packet.setKey(0);
                }
            }
        }
    };

    private enum Mode {
        DELAY,
        STACK,
        CANCEL,
        ZERO
    }

}
