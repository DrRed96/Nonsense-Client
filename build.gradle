import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
}

group 'wtf.bhopper'
version '1.0'

def os = OperatingSystem.current()
def osArch = System.getProperty("os.arch")

switch (os) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break

    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = 'natives-macos'
        break

    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = 'natives-windows'
        break
}

configurations {
    library
    nativeLib
}

repositories {
    mavenCentral()
    maven { url 'https://libraries.minecraft.net/' }
}

dependencies {

    configurations.implementation.extendsFrom(configurations.library)
    configurations.implementation.extendsFrom(configurations.nativeLib)

    // LWJGL
    library "org.lwjgl:lwjgl:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-openal:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-nanovg:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-stb:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}"
    nativeLib "org.lwjgl:lwjgl:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-openal:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-nanovg:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-stb:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}:$lwjglNatives"

    // Vorbis Libraries
    library 'com.paulscode:codecjorbis:20101023'
    library 'com.paulscode:codecwav:20101023'
    library 'com.paulscode:libraryjavasound:20101123'
    library 'com.paulscode:soundsystem:20120107'

    // Apache Log4j, these are updated to the latest version to patch the Log4shell exploit
    library 'org.apache.logging.log4j:log4j-api:2.24.0'
    library 'org.apache.logging.log4j:log4j-core:2.24.0'

    // Apache HTTP
    library 'org.apache.httpcomponents:httpclient:4.3.3'
    library 'org.apache.httpcomponents:httpcore:4.3.2'

    // Apache Commons
    library 'org.apache.commons:commons-compress:1.8.1'
    library 'org.apache.commons:commons-lang3:3.3.2'

    // Netty
    library 'io.netty:netty-all:4.0.23.Final'

    // JNA
    library 'net.java.dev.jna:jna:3.4.0'
    library 'net.java.dev.jna:platform:3.4.0'

    // JOpt Simple, uses the parse the arguments in the Main class
    library 'net.sf.jopt-simple:jopt-simple:4.6'

    // Mojang Libraries
    library 'com.mojang:authlib:1.5.21'
    library 'com.mojang:netty:1.8.8'
    library 'com.mojang:realms:1.7.59'

    // Other
    library 'commons-codec:commons-codec:1.9'
    library 'commons-io:commons-io:2.4'
    library 'commons-logging:commons-logging:1.1.3'
    library 'com.google.code.gson:gson:2.2.4'
    library 'com.google.guava:guava:17.0'
    library 'com.ibm.icu:icu4j-core-mojang:51.2'
    library 'net.java.jutils:jutils:1.0.0'
    library 'oshi-project:oshi-core:1.1'
    library 'javax.vecmath:vecmath:1.5.2'

}

jar {
    archiveFileName.set('client.jar')
}

tasks.register('libraryJar', Jar) {
    setGroup('client')

    archiveFileName.set('libs.jar')
    from configurations.library.collect { zipTree(it) }
    exclude('*.dll', '*.dylib', '*.so')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('extractLibraries', Copy) {
    setGroup('client')

    from configurations.library
    into "${layout.buildDirectory.getAsFile().get()}/libs/libraries"
}

tasks.register('extractNatives', Copy) {
    setGroup('client')

    from configurations.nativeLib.collect { zipTree(it).flatten() }
    include('*.dll', '*.dylib', '*.so')
    into "${layout.buildDirectory.getAsFile().get()}/libs/natives/${os.getFamilyName()}"
}

tasks.register('writeLibraryInfo') {
    setGroup('client')
    doFirst {
        def file = new File("${layout.buildDirectory.getAsFile().get()}/libs/libraries.json")
        file.createNewFile()
        file.text = '{\n\t"repositories": [\n'

        project.repositories.forEach { repository ->
            def url = repository.properties.get('url')
            file.text += String.format('\t\t{ "name": "%s", "url": "%s" },\n', repository.name, url)
        }

        file.text += '\t],\n\t"libraries": [\n'

        project.configurations.library.dependencies.forEach {dependency ->
            for (ArtifactRepository repository : project.repositories.asList()) {
                def url = repository.properties.get('url')
                def jar = String.format('%s/%s/%s/%s-%s.jar',
                        dependency.group.replace('.', '/'), dependency.name, dependency.version,
                        dependency.name, dependency.version)

                def jarUrl = String.format('%s%s', url, jar)

                try {
                    def jarFile = new URL(jarUrl)
                    def inStream = jarFile.openStream()
                    if (inStream != null) {
                        file.text += String.format('\t\t{ "name": "%s:%s:%s", "path": "%s", "repo": "%s" },\n',
                                dependency.group, dependency.name, dependency.version, jar, url)
                        inStream.close()
                        return
                    }

                } catch (Exception ignored) {}

            }
        }

        file.text += '\t],\n\t"natvies": [\n'

        project.configurations.nativeLib.dependencies.forEach {dependency ->
            for (ArtifactRepository repository : project.repositories.asList()) {
                def url = repository.properties.get('url')
                def jar = String.format('%s/%s/%s/%s-%s.jar',
                        dependency.group.replace('.', '/'), dependency.name, dependency.version,
                        dependency.name, dependency.version)

                def jarUrl = String.format('%s%s', url, jar)

                try {
                    def jarFile = new URL(jarUrl)
                    def inStream = jarFile.openStream()
                    if (inStream != null) {
                        file.text += String.format('\t\t{ "name": "%s:%s:%s", "path": "%s", "repo": "%s" },\n',
                                dependency.group, dependency.name, dependency.version, jar, url)
                        inStream.close()
                        return
                    }

                } catch (Exception ignored) {}

            }
        }

        file.text += "\t]\n}"

    }
}

tasks.register('copyAssets', Copy) {
    setGroup('client')

    from file(System.getenv("appdata") + "/.minecraft/assets").getAbsolutePath()
    exclude 'skins/' // Too big :(
    into "${rootDir}/run/assets"
}

tasks.libraryJar.dependsOn(tasks.jar)
tasks.processResources.dependsOn(tasks.extractNatives)
