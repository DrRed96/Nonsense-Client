import org.gradle.internal.os.OperatingSystem
import org.jetbrains.gradle.ext.*

plugins {
    id 'java'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
}

group 'wtf.bhopper'
version '1.0'

def os = OperatingSystem.current()
def osArch = System.getProperty('os.arch')

switch (os) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = 'natives-linux'
        project.ext.imguiNatives = 'imgui-java-natives-linux'
        if (osArch.startsWith('arm') || osArch.startsWith('aarch64')) {
            project.ext.lwjglNatives += osArch.contains('64') || osArch.startsWith('armv8') ? '-arm64' : '-arm32'
        } else if (osArch.startsWith('ppc')) {
            project.ext.lwjglNatives += '-ppc64le'
        } else if (osArch.startsWith('riscv')) {
            project.ext.lwjglNatives += '-riscv64'
        }
        break

    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = 'natives-macos'
        project.ext.imguiNatives = 'imgui-java-natives-macos'
        break

    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = 'natives-windows'
        project.ext.imguiNatives = 'imgui-java-natives-windows'
        break
}

configurations {
    library
    nativeLib
}

repositories {
    mavenCentral()
    maven {
        name = 'Minecraft'
        url 'https://libraries.minecraft.net/'
    }
    maven {
        name = 'ViaVersion'
        url 'https://repo.viaversion.com/'
    }
    maven {
        name = 'JitPack'
        url 'https://jitpack.io/'
    }
}

dependencies {

    configurations.implementation.extendsFrom(configurations.library)
    configurations.implementation.extendsFrom(configurations.nativeLib)

    // LWJGL
    library "org.lwjgl:lwjgl:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-openal:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-nanovg:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-stb:${project.lwjgl_version}"
    library "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}"
    nativeLib "org.lwjgl:lwjgl:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-openal:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-nanovg:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-stb:${project.lwjgl_version}:$lwjglNatives"
    nativeLib "org.lwjgl:lwjgl-tinyfd:${project.lwjgl_version}:$lwjglNatives"

    // Vorbis Libraries
    library 'com.paulscode:codecjorbis:20101023'
    library 'com.paulscode:codecwav:20101023'
    library 'com.paulscode:libraryjavasound:20101123'
    library 'com.paulscode:soundsystem:20120107'

    // Apache Log4j, these are updated to the latest version to patch the Log4shell exploit
    library 'org.apache.logging.log4j:log4j-api:2.24.0'
    library 'org.apache.logging.log4j:log4j-core:2.24.0'

    // Mojang Libraries
    library 'com.mojang:authlib:1.5.21'
    library 'com.mojang:netty:1.8.8'
    library 'com.mojang:realms:1.7.59'

    library 'org.apache.httpcomponents:httpclient:4.3.3'
    library 'org.apache.httpcomponents:httpcore:4.3.2'
    library 'org.apache.commons:commons-compress:1.8.1'
    library 'org.apache.commons:commons-lang3:3.3.2'
    library 'io.netty:netty-all:4.0.23.Final'
    library 'net.java.dev.jna:jna:3.4.0'
    library 'net.java.dev.jna:platform:3.4.0'
    library 'net.sf.jopt-simple:jopt-simple:4.6'
    library 'commons-codec:commons-codec:1.9'
    library 'commons-io:commons-io:2.4'
    library 'commons-logging:commons-logging:1.1.3'
    library 'com.google.code.gson:gson:2.2.4'
    library 'com.google.guava:guava:17.0'
    library 'com.ibm.icu:icu4j-core-mojang:51.2'
    library 'net.java.jutils:jutils:1.0.0'
    library 'oshi-project:oshi-core:1.1'
    library 'javax.vecmath:vecmath:1.5.2'

    library 'org.reflections:reflections:0.10.2'
    library 'com.github.Vatuu:discord-rpc:1.6.2'
    library 'org.luaj:luaj-jse:3.0.1'

    // ImGUI
    library 'io.github.spair:imgui-java-binding:1.87.5'
    library 'io.github.spair:imgui-java-lwjgl3:1.87.5'
    nativeLib "io.github.spair:$imguiNatives:1.87.5"

    // Via Version
    library 'com.viaversion:viabackwards:5.0.2-SNAPSHOT'
    library 'com.viaversion:viarewind:4.0.1-SNAPSHOT'
    library 'com.viaversion:viaversion:5.0.2-SNAPSHOT'
    library 'org.yaml:snakeyaml:2.2'

}

jar {
    archiveFileName.set('client.jar')

    manifest {
        attributes(
                'Main-Class': 'net.minecraft.client.main.Main',
                'Multi-Release': 'true'
        )
    }
}

tasks.register('allJar', Jar) {
    setGroup('client')

    archiveFileName.set('all.jar')
    from sourceSets.main.output
    from configurations.library.collect { zipTree(it) }
    from configurations.nativeLib.collect { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Main-Class': 'net.minecraft.client.main.Main',
                'Multi-Release': 'true'
        )
    }
}

tasks.register('libraryJar', Jar) {
    setGroup('client')

    archiveFileName.set('libs.jar')
    from configurations.library.collect { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('nativesJar', Jar) {
    setGroup('client')
    archiveFileName.set("natives-${os.getFamilyName()}.jar")
    from configurations.nativeLib.collect { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('extractLibraries', Copy) {
    setGroup('client')

    from configurations.library
    into "${layout.buildDirectory.getAsFile().get()}/libs/libraries"
}

tasks.register('extractNatives', Copy) {
    setGroup('client')

    from configurations.nativeLib.collect { zipTree(it).flatten() }
    include('*.dll', '*.dylib', '*.so')
    into "${layout.buildDirectory.getAsFile().get()}/libs/natives/${os.getFamilyName()}"
}

tasks.register('copyAssets', Copy) {
    setGroup('client')

    from file(System.getenv("appdata") + "/.minecraft/assets").getAbsolutePath()
    exclude 'skins/' // Too big :(
    into "${rootDir}/run/assets"
}

tasks.build.dependsOn(tasks.allJar)
tasks.build.dependsOn(tasks.libraryJar)
tasks.build.dependsOn(tasks.nativesJar)
tasks.processResources.dependsOn(tasks.extractNatives)

idea.project.settings.runConfigurations {
    "Start"(Application) {
        mainClass = 'Start'
        workingDirectory = "${project.rootDir}/run"
        jvmArgs = "-Xmx4G -Xms512m -Djava.library.path=../build/libs/natives/${os.getFamilyName()}"
        moduleName = "Nonsense-Client.test"
    }
}
